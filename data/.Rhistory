# Leer datos
df <- read.csv("./data/clean_data.csv")
getwd()
wdir<-"~/Documents/ITAM/ModelosLineales/proyecto_mlg/FinalLineales/data"
setwd(wdir)
# Leer datos
df <- read.csv("./data/clean_data.csv")
# Leer datos
df <- read.csv("clean_data.csv")
# Preparar lista de datos para JAGS
data_jags <- list(
N = nrow(df),
B = 5,  # Número de bancos (BBVA, BanCoppel, Azteca, Otros, STP)
monto = as.matrix(df %>% select(monto_bbva, monto_bancoppel, monto_azteca, monto_otros, monto_stp) / 1e6),  # Escalar a millones
cuentas = as.matrix(df %>% select(cuentas_bbva, cuentas_bancoppel, cuentas_azteca, cuentas_otros, cuentas_stp)),
operaciones = as.matrix(df %>% select(operaciones_bbva, operaciones_bancoppel, operaciones_azteca, operaciones_otros, operaciones_stp)),
tiempo = 1:nrow(df)  # Variable temporal (opcional)
)
View(data_jags)
as.matrix(df %>% select(monto_bbva, monto_bancoppel, monto_azteca, monto_otros, monto_stp) / 1e6),
as.matrix(df %>% select(monto_bbva, monto_bancoppel, monto_azteca, monto_otros, monto_stp) / 1e6)
as.matrix(df %>% select(cuentas_bbva, cuentas_bancoppel, cuentas_azteca, cuentas_otros, cuentas_stp))
as.matrix(df %>% select(operaciones_bbva, operaciones_bancoppel, operaciones_azteca, operaciones_otros, operaciones_stp))
1:nrow(df)
inits <- function() {
list(
alpha = rnorm(5, mean = 0, sd = 1),
beta1 = rnorm(5, mean = 0, sd = 1),
beta2 = rnorm(5, mean = 0, sd = 1),
mu_alpha = rnorm(1, 0, 1),
mu_beta1 = rnorm(1, 0, 1),
mu_beta2 = rnorm(1, 0, 1),
sigma_alpha = runif(1, 0.1, 2),
sigma_beta1 = runif(1, 0.1, 2),
sigma_beta2 = runif(1, 0.1, 2),
gamma = rnorm(1, 0, 1),
sigma = runif(1, 0.1, 2)
)
}
parameters <- c(
"alpha", "beta1", "beta2",  # Efectos por banco
"mu_alpha", "mu_beta1", "mu_beta2",  # Medias globales
"sigma_alpha", "sigma_beta1", "sigma_beta2",  # Desviaciones estándar
"gamma", "sigma",  # Efecto temporal y dispersión
"mu"  # Predicciones medias (opcional)
)
fit <- jags(
data = data_jags,
inits = inits,
parameters.to.save = parameters,
model.file = "modelo_jerarquico.txt",
n.chains = 3,
n.iter = 20000,
n.burnin = 5000,
n.thin = 2
)
# Preparar lista de datos para JAGS
data_jags <- list(
N = nrow(df),
B = 5,  # Número de bancos (BBVA, BanCoppel, Azteca, Otros, STP)
monto = as.matrix(df %>% select(monto_bbva, monto_bancoppel, monto_azteca, monto_otros, monto_stp) / 1e6),  # Escalar a millones
cuentas = as.matrix(df %>% select(cuentas_bbva, cuentas_bancoppel, cuentas_azteca, cuentas_otros, cuentas_stp)),
operaciones = as.matrix(df %>% select(operaciones_bbva, operaciones_bancoppel, operaciones_azteca, operaciones_otros, operaciones_stp)),
tiempo = 1:nrow(df)  # Variable temporal (opcional)
)
inits <- function() {
list(
alpha = rnorm(5, mean = 0, sd = 1),
beta1 = rnorm(5, mean = 0, sd = 1),
beta2 = rnorm(5, mean = 0, sd = 1),
mu_alpha = rnorm(1, 0, 1),
mu_beta1 = rnorm(1, 0, 1),
mu_beta2 = rnorm(1, 0, 1),
sigma_alpha = runif(1, 0.1, 2),
sigma_beta1 = runif(1, 0.1, 2),
sigma_beta2 = runif(1, 0.1, 2),
gamma = rnorm(1, 0, 1),
sigma = runif(1, 0.1, 2)
)
}
parameters <- c(
"alpha", "beta1", "beta2",  # Efectos por banco
"mu_alpha", "mu_beta1", "mu_beta2",  # Medias globales
"sigma_alpha", "sigma_beta1", "sigma_beta2",  # Desviaciones estándar
"gamma", "sigma",  # Efecto temporal y dispersión
"mu"  # Predicciones medias (opcional)
)
fit <- jags(
data = data_jags,
inits = inits,
parameters.to.save = parameters,
model.file = "modelo_jerarquico.txt",
n.chains = 3,
n.iter = 20000,
n.burnin = 5000,
n.thin = 2
)
# Checar montos mínimos por banco
apply(data_jags$monto, 2, min)
# Checar NAs o infinitos
sum(is.na(data_jags$monto))
sum(is.infinite(data_jags$monto))
inits <- function() {
list(
alpha = runif(5, 0.5, 2),       # Valores positivos para alpha
beta1 = rnorm(5, 0, 0.1),       # Valores cercanos a cero
beta2 = rnorm(5, 0, 0.1),
mu_alpha = runif(1, 0.5, 2),    # Hiperparámetros positivos
mu_beta1 = rnorm(1, 0, 0.1),
mu_beta2 = rnorm(1, 0, 0.1),
sigma_alpha = runif(1, 0.1, 1), # Evitar valores cerca de cero
sigma_beta1 = runif(1, 0.1, 1),
sigma_beta2 = runif(1, 0.1, 1),
gamma = rnorm(1, 0, 0.1),
sigma = runif(1, 0.5, 2)        # Dispersión inicial moderada
)
}
parameters <- c(
"alpha", "beta1", "beta2",  # Efectos por banco
"mu_alpha", "mu_beta1", "mu_beta2",  # Medias globales
"sigma_alpha", "sigma_beta1", "sigma_beta2",  # Desviaciones estándar
"gamma", "sigma",  # Efecto temporal y dispersión
"mu"  # Predicciones medias (opcional)
)
# Checar montos mínimos por banco
apply(data_jags$monto, 2, min)
# Checar NAs o infinitos
sum(is.na(data_jags$monto))
sum(is.infinite(data_jags$monto))
fit <- jags(
data = data_jags,
inits = inits,
parameters.to.save = parameters,
model.file = "modelo_jerarquico.txt",
n.chains = 3,
n.iter = 20000,
n.burnin = 5000,
n.thin = 2
)
parameters <- c(
"alpha",
"shape", "rate",
"mu",
"monto"
)
fit <- jags(
model = "modelo_jerarquico.txt",
data = data_jags,
inits = inits,
monitor = parameters,
n.chains = 3,
adapt = 2000,
burnin = 5000,
sample = 10000
)
params <- c(
"alpha",
"shape", "rate",
"mu",
"monto"
)
a <- jags(data_jags, inits, params, model.file = "modelo_jerarquico.txt",  iter = 50000, chains = 2, burnin = 1000, thin = 2)
# Lista para JAGS (5 bancos: BBVA, BanCoppel, Azteca, Otros, STP)
data_jags <- list(
N = nrow(df),
B = 5,
# Montos en millones (evitar overflow)
monto = df %>% select(monto_bbva, monto_bancoppel, monto_azteca, monto_otros, monto_stp) %>%
mutate_all(~ ./1e6) %>% as.matrix(),
# Predictores estandarizados
cuentas = df %>% select(cuentas_bbva, cuentas_bancoppel, cuentas_azteca, cuentas_otros, cuentas_stp) %>%
scale() %>% as.matrix(),
operaciones = df %>% select(operaciones_bbva, operaciones_bancoppel, operaciones_azteca, operaciones_otros, operaciones_stp) %>%
scale() %>% as.matrix()
)
inits <- function() {
list(
alpha = runif(5, 1, 2),  # Interceptos positivos
mu_alpha = runif(1, 1, 2),
sigma_alpha = runif(1, 0.5, 1.5),
beta1 = rnorm(1, 0, 0.1),
beta2 = rnorm(1, 0, 0.1),
sigma = runif(1, 0.5, 2)
)
}
parameters <- c("alpha", "beta1", "beta2", "mu_alpha", "sigma_alpha", "sigma")
fit <- jags(
data = data_jags,
inits = inits,
parameters.to.save = parameters,
model.file = "modelo_jerarquico.txt",
n.chains = 3,
n.iter = 15000,
n.burnin = 5000,
n.thin = 2
)
# Resumen
print(fit)
# Diagnósticos
traceplot(fit, varname = c("alpha", "beta1", "sigma"))
fit
boxplot(alpha_samples, main = "Interceptos por Banco")
boxplot(alpha_samples, main = "Interceptos por Banco")
boxplot(alpha_samples, main = "Interceptos por Banco")
--------
library(R2jags)
# Datos para JAGS (solo BBVA)
data_jags <- list(
N = nrow(df),
y = df$monto_bbva / 1e6,  # Escalar a millones
cuentas = scale(df$cuentas_bbva)[, 1],  # Estandarizado
operaciones = scale(df$operaciones_bbva)[, 1]
)
# Modelo Gamma con link log (archivo "modelo_gamma.txt")
model_string <- "
model {
# Likelihood
for (i in 1:N) {
y[i] ~ dgamma(shape[i], rate[i])
shape[i] <- mu[i]^2 / sigma^2
rate[i] <- mu[i] / sigma^2
log(mu[i]) <- alpha + beta1 * cuentas[i] + beta2 * operaciones[i]
}
# Priors
alpha ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
beta2 ~ dnorm(0, 0.001)
sigma ~ dunif(0, 10)
}
"
writeLines(model_string, "modelo_gamma.txt")
# Inicialización
inits <- function() {
list(
alpha = rnorm(1, mean = 1, sd = 1),
beta1 = rnorm(1, mean = 0, sd = 0.5),
beta2 = rnorm(1, mean = 0, sd = 0.5),
sigma = runif(1, 0.5, 2)
)
}
# Parámetros a monitorear
parameters <- c("alpha", "beta1", "beta2", "sigma")
# Ejecutar modelo
fit <- jags(
data = data_jags,
inits = inits,
parameters.to.save = parameters,
model.file = "modelo_gamma.txt",
n.chains = 3,
n.iter = 10000,
n.burnin = 3000,
n.thin = 2
)
# Resultados
print(fit)
data_jags <- list(
N = nrow(df),
B = 5,
y = as.matrix(df %>% select(monto_bbva, monto_bancoppel, monto_azteca, monto_otros, monto_stp) / 1e6),
x = as.matrix(df %>% select(operaciones_bbva, operaciones_bancoppel, operaciones_azteca, operaciones_otros, operaciones_stp))
)
data_jags <- list(
N = nrow(df),
B = 5,
y = as.matrix(df %>% select(monto_bbva, monto_bancoppel, monto_azteca, monto_otros, monto_stp) / 1e6),
x = as.matrix(df %>% select(operaciones_bbva, operaciones_bancoppel, operaciones_azteca, operaciones_otros, operaciones_stp))
)
model_string <- "
model {
for (i in 1:N) {
for (j in 1:B) {
y[i,j] ~ dgamma(shape[i,j], rate[i,j])
shape[i,j] <- mu[i,j]^2 / sigma^2
rate[i,j] <- mu[i,j] / sigma^2
log(mu[i,j]) <- alpha[j] + beta * x[i,j]
}
}
for (j in 1:B) {
alpha[j] ~ dnorm(mu_alpha, tau_alpha)
}
mu_alpha ~ dnorm(0, 0.001)
tau_alpha <- 1/pow(sigma_alpha, 2)
sigma_alpha ~ dunif(0, 10)
beta ~ dnorm(0, 0.001)
sigma ~ dunif(0, 10)
}
"
data_jags <- list(
N = nrow(df),
B = 5,
y = as.matrix(df %>% select(monto_bbva, monto_bancoppel, monto_azteca, monto_otros, monto_stp) / 1e6),
x = as.matrix(df %>% select(operaciones_bbva, operaciones_bancoppel, operaciones_azteca, operaciones_otros, operaciones_stp))
)
model_string <- "
model {
for (i in 1:N) {
for (j in 1:B) {
y[i,j] ~ dgamma(shape[i,j], rate[i,j])
shape[i,j] <- mu[i,j]^2 / sigma^2
rate[i,j] <- mu[i,j] / sigma^2
log(mu[i,j]) <- alpha[j] + beta * x[i,j]
}
}
for (j in 1:B) {
alpha[j] ~ dnorm(mu_alpha, tau_alpha)
}
mu_alpha ~ dnorm(0, 0.001)
tau_alpha <- 1/pow(sigma_alpha, 2)
sigma_alpha ~ dunif(0, 10)
beta ~ dnorm(0, 0.001)
sigma ~ dunif(0, 10)
}
"
-------
library(R2jags)
# Datos para JAGS
data_jags <- list(
N = nrow(df),  # Número de meses
B = 5,         # 5 bancos
monto = as.matrix(df[, c("monto_bbva", "monto_bancoppel", "monto_azteca", "monto_otros", "monto_stp")] / 1e6),  # Escalar a millones
operaciones = scale(as.matrix(df[, c("operaciones_bbva", "operaciones_bancoppel", "operaciones_azteca", "operaciones_otros", "operaciones_stp")]))
)
inits <- function() {
list(
alpha = runif(5, 1, 2),          # Interceptos positivos por banco
mu_alpha = runif(1, 1, 2),       # Media global de interceptos
sigma_alpha = runif(1, 0.5, 1.5), # Variabilidad entre bancos
beta = rnorm(1, 0, 0.5),         # Efecto de operaciones
sigma = runif(1, 0.5, 2)         # Dispersión
)
}
parameters <- c("alpha", "beta", "mu_alpha", "sigma_alpha", "sigma")
writeLines(model_string, "modelo_gamma.txt")
fit <- jags(
data = data_jags,
inits = inits,
parameters.to.save = parameters,
model.file = "modelo_gamma.txt",
n.chains = 3,
n.iter = 15000,
n.burnin = 5000,
n.thin = 2
)
# Datos para JAGS (solo BBVA)
data_jags <- list(
N = nrow(df),
y = df$monto_bbva / 1e6,  # Escalar a millones
cuentas = scale(df$cuentas_bbva)[, 1],  # Estandarizado
operaciones = scale(df$operaciones_bbva)[, 1]
)
# Datos para JAGS (solo BBVA)
data_jags <- list(
N = nrow(df),
y = df$monto_bbva / 1e6,  # Escalar a millones
cuentas = scale(df$cuentas_bbva)[, 1],  # Estandarizado
operaciones = scale(df$operaciones_bbva)[, 1]
)
model_gamma<- "
model {
# Likelihood
for (i in 1:N) {
for (j in 1:B) {
monto[i,j] ~ dgamma(shape[i,j], rate[i,j])
shape[i,j] <- mu[i,j]^2 / sigma2
rate[i,j] <- mu[i,j] / sigma2
log(mu[i,j]) <- alpha[j] + beta * operaciones[i,j]
}
}
# Efectos aleatorios por banco
for (j in 1:B) {
alpha[j] ~ dnorm(mu_alpha, tau_alpha)
}
# Hiperparámetros
mu_alpha ~ dnorm(0, 0.001)
tau_alpha <- 1 / pow(sigma_alpha, 2)
sigma_alpha ~ dunif(0, 10)
# Efecto fijo global
beta ~ dnorm(0, 0.001)
# Dispersión
sigma2 <- pow(sigma, 2)
sigma ~ dunif(0, 10)
}
"
writeLines(model_string, "modelo_gamma.txt")
inits <- function() {
list(
alpha = runif(5, 1, 2),          # Interceptos positivos por banco
mu_alpha = runif(1, 1, 2),       # Media global de interceptos
sigma_alpha = runif(1, 0.5, 1.5), # Variabilidad entre bancos
beta = rnorm(1, 0, 0.5),         # Efecto de operaciones
sigma = runif(1, 0.5, 2)         # Dispersión
)
}
parameters <- c("alpha", "beta", "mu_alpha", "sigma_alpha", "sigma")
fit <- jags(
data = data_jags,
inits = inits,
parameters.to.save = parameters,
model.file = "modelo_gamma.txt",
n.chains = 3,
n.iter = 15000,
n.burnin = 5000,
n.thin = 2
)
# Datos para JAGS (solo BBVA)
data_jags <- list(
N = nrow(df),  # Número de observaciones (meses)
B = 5,         # Número de bancos (BBVA, BanCoppel, Azteca, Otros, STP)
monto = as.matrix(df[, c("monto_bbva", "monto_bancoppel", "monto_azteca", "monto_otros", "monto_stp")] / 1e6),  # Escalado
operaciones = as.matrix(scale(df[, c("operaciones_bbva", "operaciones_bancoppel", "operaciones_azteca", "operaciones_otros", "operaciones_stp")]))
)
model_gamma<- "
model {
# Likelihood
for (i in 1:N) {
for (j in 1:B) {
monto[i,j] ~ dgamma(shape[i,j], rate[i,j])
shape[i,j] <- mu[i,j]^2 / sigma2
rate[i,j] <- mu[i,j] / sigma2
log(mu[i,j]) <- alpha[j] + beta * operaciones[i,j]
}
}
# Efectos aleatorios por banco
for (j in 1:B) {
alpha[j] ~ dnorm(mu_alpha, tau_alpha)
}
# Hiperparámetros
mu_alpha ~ dnorm(0, 0.001)
tau_alpha <- 1 / pow(sigma_alpha, 2)
sigma_alpha ~ dunif(0, 10)
# Efecto fijo global
beta ~ dnorm(0, 0.001)
# Dispersión
sigma2 <- pow(sigma, 2)
sigma ~ dunif(0, 10)
}
"
writeLines(model_string, "modelo_gamma.txt")
inits <- function() {
list(
alpha = runif(5, 1, 2),          # Interceptos positivos por banco
mu_alpha = runif(1, 1, 2),       # Media global de interceptos
sigma_alpha = runif(1, 0.5, 1.5), # Variabilidad entre bancos
beta = rnorm(1, 0, 0.5),         # Efecto de operaciones
sigma = runif(1, 0.5, 2)         # Dispersión
)
}
parameters <- c("alpha", "beta", "mu_alpha", "sigma_alpha", "sigma")
fit <- jags(
data = data_jags,
inits = inits,
parameters.to.save = parameters,
model.file = "modelo_gamma.txt",
n.chains = 3,
n.iter = 15000,
n.burnin = 5000,
n.thin = 2
)
# Datos para JAGS (solo BBVA)
data_jags <- list(
N = nrow(df),  # Número de observaciones (meses)
B = 5,         # Número de bancos (BBVA, BanCoppel, Azteca, Otros, STP)
monto = as.matrix(df[, c("monto_bbva", "monto_bancoppel", "monto_azteca", "monto_otros", "monto_stp")] / 1e6),  # Escalado
operaciones = as.matrix(scale(df[, c("operaciones_bbva", "operaciones_bancoppel", "operaciones_azteca", "operaciones_otros", "operaciones_stp")]))
)
model_gamma<- "
model {
# Likelihood
for (i in 1:N) {
for (j in 1:B) {
monto[i,j] ~ dgamma(shape[i,j], rate[i,j])
shape[i,j] <- mu[i,j]^2 / sigma2
rate[i,j] <- mu[i,j] / sigma2
log(mu[i,j]) <- alpha[j] + beta * operaciones[i,j]  # Usa 'operaciones' (no 'x')
}
}
# Efectos aleatorios por banco
for (j in 1:B) {
alpha[j] ~ dnorm(mu_alpha, tau_alpha)
}
# Hiperparámetros
mu_alpha ~ dnorm(0, 0.001)
tau_alpha <- 1 / pow(sigma_alpha, 2)
sigma_alpha ~ dunif(0, 10)
# Efecto fijo global
beta ~ dnorm(0, 0.001)
# Dispersión
sigma2 <- pow(sigma, 2)
sigma ~ dunif(0, 10)
}
"
writeLines(model_string, "modelo_gamma.txt")
inits <- function() {
list(
alpha = runif(5, 1, 2),          # Interceptos positivos por banco
mu_alpha = runif(1, 1, 2),       # Media global de interceptos
sigma_alpha = runif(1, 0.5, 1.5), # Variabilidad entre bancos
beta = rnorm(1, 0, 0.5),         # Efecto de operaciones
sigma = runif(1, 0.5, 2)         # Dispersión
)
}
parameters <- c("alpha", "beta", "mu_alpha", "sigma_alpha", "sigma")
fit <- jags(
data = data_jags,
inits = inits,
parameters.to.save = parameters,
model.file = "modelo_gamma.txt",
n.chains = 3,
n.iter = 15000,
n.burnin = 5000,
n.thin = 2
)
