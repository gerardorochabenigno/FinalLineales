build_wrap <- function(pars) build_dlm(pars, xreg)
fit <- dlmMLE(y, parm = init_pars, build = build_wrap)
pars_mle <- fit$par
mod_dlm <- build_dlm(pars_mle)
mod_dlm <- build_dlm(pars_mle, xreg)
filtro <- dlmFilter(y, mod_dlm)
suave <- dlmSmooth(filtro)
nivel <- dropFirst(suave$s[,1])
pendiente <- dropFirst(suave$s[,2])
estacionalidad <- rowSums(dropFirst(suave$s[,3:8]))
festividad <- dropFirst(suave$s[,9])
var_list <- dlmSvd2var(suave$U.S, suave$D.S)
nivel_sd <- sqrt(sapply(var_list[-1], function(V) V[1, 1]))
z <- qnorm(0.975)
nivel_upper <- nivel + z * nivel_sd
nivel_lower <- nivel - z * nivel_sd
head(dropFirst(suave$s)
)
festividad
# Creamos df para graficar
df_dlm <- tibble(
fecha = df$fecha,
total_ops = df$total_ops,
nivel = nivel,
pendiente = pendiente,
estacionalidad = estacionalidad,
nivel_lower = nivel_lower,
nivel_upper = nivel_upper,
y_hat = nivel + estacionalidad,
resid = y - (nivel + estacionalidad)
)
df_gr <- df_dlm |>
filter(fecha >= '2024-01-01')
head(df_gr)
ggplot(df_gr, aes(x = fecha)) +
geom_line(aes(y = total_ops), color = 'lightgrey') +
geom_line(aes(y = nivel), color = 'red') +
geom_ribbon(aes(ymin = nivel_lower, ymax = nivel_upper), alpha = 0.4) +
labs(title = 'DLM: Total de operaciones por día',
x = 'Fecha', y = 'Total de operaciones') +
theme_minimal()
residuos <- residuals(filtro, type = "raw")
qqnorm(residuos$res)
qqline(residuos$res, col = "red")
df_dlm <- tibble(
fecha = df$fecha,
total_ops = df$total_ops,
nivel = nivel,
pendiente = pendiente,
estacionalidad = estacionalidad,
nivel_lower = nivel_lower,
nivel_upper = nivel_upper,
y_hat = nivel + estacionalidad,
serie_deses = y - (estacionalidad + festividad),
resid = y - (nivel + estacionalidad)
)
df_gr <- df_dlm |>
filter(fecha >= '2024-01-01')
head(df_gr)
ggplot(df_gr, aes(x = fecha)) +
geom_line(aes(y = total_ops), color = 'lightgrey') +
geom_line(aes(y = serie_deses), color = 'red') +
#  geom_ribbon(aes(ymin = nivel_lower, ymax = nivel_upper), alpha = 0.4) +
labs(title = 'DLM: Total de operaciones por día',
x = 'Fecha', y = 'Total de operaciones') +
theme_minimal()
ggplot(df_gr, aes(x = fecha)) +
geom_line(aes(y = total_ops), color = 'blue') +
geom_line(aes(y = serie_deses), color = 'red', alpha=0.4) +
#  geom_ribbon(aes(ymin = nivel_lower, ymax = nivel_upper), alpha = 0.4) +
labs(title = 'DLM: Total de operaciones por día',
x = 'Fecha', y = 'Total de operaciones') +
theme_minimal()
ggplot(df_gr, aes(x = fecha)) +
geom_line(aes(y = total_ops), color = 'blue') +
geom_line(aes(y = nivel), color = 'red', alpha=0.4) +
geom_ribbon(aes(ymin = nivel_lower, ymax = nivel_upper), alpha = 0.4) +
labs(title = 'DLM: Total de operaciones por día',
x = 'Fecha', y = 'Total de operaciones') +
theme_minimal()
ggplot(df_gr, aes(x = fecha)) +
geom_line(aes(y = total_ops), color = 'lightgrey') +
geom_line(aes(y = nivel), color = 'red', alpha=0.4) +
geom_ribbon(aes(ymin = nivel_lower, ymax = nivel_upper), alpha = 0.4) +
labs(title = 'DLM: Total de operaciones por día',
x = 'Fecha', y = 'Total de operaciones') +
theme_minimal()
var_obs <- dropFirst(filtro$U.C) * dropFirst(filtro$D.C)  # varianza del estado
View(filtro)
var_obs <- dropFirst(filtro$U.C) * dropFirst(filtro$D.C)
var_filtro <- dlmSvd2var(filtro$U.C, filtro$D.C)
ic_upper <- dropFirst(filtro$m) + 2 * sqrt(var_filtro)
View(filtro)
filtro$m
head(filtro$m)
ic_upper <- dropFirst(rowSums(filtro$m)) + 2 * sqrt(var_filtro)
ic_upper <- rowSums(dropFirst(filtro$m)) + 2 * sqrt(var_filtro)
rowSums(dropFirst(filtro$m))
var_filtro <- dlmSvd2var(filtro$U.C, filtro$D.C)
ic_upper <- rowSums(dropFirst(filtro$m)) + 2 * sqrt(var_filtro)
class(var_filtro)
View(var_filtro)
var_obs <- sapply(var_filtro, function(V) V[1, 1])
mu <- dropFirst(filtro$m)
upper <- mu + 2 * sqrt(var_obs)
length(mu)
length(var_obs)
mu <- dropFirst(filtro$f)
upper <- mu + 2 * sqrt(var_obs)
var_obs <- sapply(var_filtro, function(V) V[1, 1])
var_obs
mu <- dropFirst(filtro$f)
head(mu)
head(y)
var_obs <- sapply(var_filtro, function(V) V[1, 1])
mu <- dropFirst(filtro$f)
upper <- mu + 2 * sqrt(var_obs)
length(var_obs)
length(mu)
length(y)
mu <- dropFirst(filtro$f)  # longitud 2030
var_obs <- sapply(var_filtro, function(V) V[1, 1])[2:(length(mu) + 1)]  # también 2030
length(mu)
length(var_obs)
mu <- dropFirst(filtro$f)  # longitud 2030
var_obs <- sapply(var_filtro, function(V) V[1, 1])[2:(length(mu) + 1)]  # también 2030
upper <- mu + 2 * sqrt(var_obs)
lower <- mu - 2 * sqrt(var_obs)
plot(y, type = 'l', col = 'lightgrey', main = 'DLM: Total de operaciones por día')
lines(mu, col = 'red', lwd = 2)
length(df_gr$fecha)
plot(y[-447:], type = 'l', col = 'lightgrey', main = 'DLM: Total de operaciones por día')
plot(tail(y, 447), type = 'l', col = 'lightgrey', main = 'DLM: Total de operaciones por día')
plot(tail(df$fecha, 447), tail(y, 447), type = 'l', col = 'lightgrey', main = 'DLM: Total de operaciones por día')
plot(tail(df$fecha, 447), tail(y, 447), type = 'l', col = 'lightgrey', main = 'DLM: Total de operaciones por día', ylab='')
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey',
main = 'DLM: Total de operaciones por día', ylab='',
limits = c(0, 25000))
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey',
main = 'DLM: Total de operaciones por día', ylab='',
limit = c(0, 25000))
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey',
main = 'DLM: Total de operaciones por día', ylab='')
warnings()
plot(tail(df$fecha, 447), tail(y, 447))
plot(tail(df$fecha, 447), tail(y, 447)
type = 'l', col = 'lightgrey', )
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey', )
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey', )
main = 'DLM: Total de operaciones por día', ylab='')
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey',
main = 'DLM: Total de operaciones por día', ylab='')
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey',
main = 'DLM: Total de operaciones por día', ylab='')
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey',
main = 'DLM: Total de operaciones por día', ylab='')
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey',
main = 'DLM: Total de operaciones por día', ylab='')
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey',
main = 'DLM: Total de operaciones por día', ylab='',
ylim = c(0, 25000))
lines(tail(df$fecha, 447), tail(upper, 447), col = 'red', lwd = 2)
f <- tail(mu, 447)
l <- tail(lower, 447)
u <- tail(upper, 447)
plot(tail(df$fecha, 447), tail(y, 447),
type = 'l', col = 'lightgrey',
main = 'DLM: Total de operaciones por día', ylab='',
ylim = c(0, 25000))
lines(tail(df$fecha, 447), f, col = 'firebrick', lwd = 2)         # línea esperada
lines(tail(df$fecha, 447), u, col = 'steelblue', lty = 2)         # límite superior
lines(tail(df$fecha, 447), l, col = 'steelblue', lty = 2)         # límite inferior
f <- tail(mu, 447)
l <- tail(lower, 447)
u <- tail(upper, 447)
df_plot <- tibble(
fecha = tail(df$fecha, 447),
y      = tail(y, 447),
mu     = tail(mu, 447),
upper  = tail(upper, 447),
lower  = tail(lower, 447)
)
ggplot(df_plot, aes(x = fecha)) +
geom_line(aes(y = y), color = 'lightgrey') +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = 'steelblue', alpha = 0.3) +
geom_line(aes(y = mu), color = 'firebrick', size = 1) +
labs(
title = "DLM: Total de operaciones por día",
y = "",
x = "Fecha"
) +
ylim(0, 25000) +
theme_minimal()
ggplot(df_plot, aes(x = fecha)) +
geom_line(aes(y = y), color = 'lightgrey')
ggplot(df_plot, aes(x = fecha)) +
geom_line(aes(y = y), color = 'lightgrey') +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = 'steelblue', alpha = 0.3)
ggplot(df_plot, aes(x = fecha)) +
geom_line(aes(y = y), color = 'lightgrey') +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = 'steelblue', alpha = 0.4) +
#  geom_line(aes(y = mu), color = 'firebrick', size = 1) +
labs(
title = "DLM: Total de operaciones por día",
y = "",
x = "Fecha"
) +
ylim(0, 25000) +
theme_minimal()
ggplot(df_plot, aes(x = fecha)) +
geom_line(aes(y = y), color = 'lightgrey') +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = 'steelblue', alpha = 0.5) +
#  geom_line(aes(y = mu), color = 'firebrick', size = 1) +
labs(
title = "DLM: Total de operaciones por día",
y = "",
x = "Fecha"
) +
ylim(0, 25000) +
theme_minimal()
ggplot(df_plot, aes(x = fecha)) +
geom_line(aes(y = y), color = 'lightgrey') +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = 'steelblue', alpha = 0.6) +
#  geom_line(aes(y = mu), color = 'firebrick', size = 1) +
labs(
title = "DLM: Total de operaciones por día",
y = "",
x = "Fecha"
) +
ylim(0, 25000) +
theme_minimal()
ggplot(df_plot, aes(x = fecha)) +
geom_line(aes(y = y), color = 'lightgrey') +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = 'steelblue', alpha = 0.6) +
geom_line(aes(y = mu), color = 'firebrick', size = 1) +
labs(
title = "DLM: Total de operaciones por día",
y = "",
x = "Fecha"
) +
ylim(0, 25000) +
theme_minimal()
ggplot(df_plot, aes(x = fecha)) +
geom_line(aes(y = y), color = 'lightgrey') +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = 'steelblue', alpha = 0.6) +
geom_line(aes(y = mu), color = 'firebrick') +
labs(
title = "DLM: Total de operaciones por día",
y = "",
x = "Fecha"
) +
ylim(0, 25000) +
theme_minimal()
rm(list = rm())
rm(list = rm())
library(tidyverse)
PATH = "../data/raw"
# Load the data
df <- read_csv(file.path(PATH, "ops.csv"))
head(df)
colnames(df) <- c('fecha', 'ops')
head(df)
library(r2jags)
library(R2jags)
PATH = "../data/raw"
df <- read_csv(file.path(PATH, "ops.csv"))
colnames(df) <- c('fecha', 'ops')
df <- df |> filter(fecha >= "2024-01-01")
head(df)
y = df$ops
n = length(y)
# JAGS. Modelo 1: Modelo de tendencia local
y = df$ops
n = length(y)
data <- list(
y = y,
n = n,
k = 3
)
rm(list = rm())
library(tidyverse)
library(R2jags)
rm(list = rm())
library(tidyverse)
library(R2jags)
PATH = "../data/raw"
df <- read_csv(file.path(PATH, "ops.csv"))
colnames(df) <- c('fecha', 'ops')
df <- df |> filter(fecha >= "2024-01-01")
head(df)
# JAGS. Modelo 1: Modelo de tendencia local
y = df$ops
n = length(y)
data <- list(
y = y,
n = n,
k = 3
)
inits <- function() {
list(
mu = c(y_obs[1], rep(NA, n + k - 1)),
tau.y = 1,
tau.mu = 1
)
}
data <- list(
"y" = y,
"n" = n,
"k" = 3
)
inits <- function() {
list(
"mu" = c(y_obs[1], rep(NA, n + k - 1)),
"tau.y" = 1,
"tau.mu" = 1
)
}
data <- list(
"y" = y,
"n" = n,
"k" = 3
)
inits <- function() {
list(
"mu" = c(y_obs[1], rep(NA, n + k - 1)),
"tau.y" = 1,
"tau.mu" = 1
)
}
params <- c("mu", "y", "tau.y", "tau.mu")
modelo <- jags.model(".jags/nivel.txt", data = data, inits = inits, n.chains = 2, n.iter = 50000, n.burning = 5000)
modelo <- jags(".jags/nivel.txt", data = data, inits = inits, n.chains = 2, n.iter = 50000, n.burning = 5000)
modelo <- jags(
data = data,
inits = inits,
parameters.to.save = parameters,
model.file = ".jags/nivel.txt",
n.chains = 2,
n.iter = 50000,
n.burnin = 5000,
n.thin = 5
)
modelo <- jags(
data = data,
inits = inits,
parameters.to.save = params,
model.file = ".jags/nivel.txt",
n.chains = 2,
n.iter = 50000,
n.burnin = 5000,
n.thin = 5
)
inits <- function() {
list(
"mu" = c(y[1], rep(NA, n + k - 1)),
"tau.y" = 1,
"tau.mu" = 1
)
}
params <- c("mu", "y", "tau.y", "tau.mu")
modelo <- jags(
data = data,
inits = inits,
parameters.to.save = params,
model.file = ".jags/nivel.txt",
n.chains = 2,
n.iter = 50000,
n.burnin = 5000,
n.thin = 5
)
data <- list(
"y" = y,
"n" = n,
"k" = k
)
k=3
data <- list(
"y" = y,
"n" = n,
"k" = k
)
inits <- function() {
list(
"mu" = c(y[1], rep(NA, n + k - 1)),
"tau.y" = 1,
"tau.mu" = 1
)
}
params <- c("mu", "y", "tau.y", "tau.mu")
modelo <- jags(
data = data,
inits = inits,
parameters.to.save = params,
model.file = ".jags/nivel.txt",
n.chains = 2,
n.iter = 50000,
n.burnin = 5000,
n.thin = 5
)
modelo <- jags(
data = data,
inits = inits,
parameters.to.save = params,
model.file = "./jags/nivel.txt",
n.chains = 2,
n.iter = 50000,
n.burnin = 5000,
n.thin = 5
)
modelo <- jags(
data = data,
inits = inits,
parameters.to.save = params,
model.file = "./jags/nivel.txt",
n.chains = 2,
n.iter = 50000,
n.burnin = 5000,
n.thin = 5
)
data <- list(
"y" = y,
"n" = n,
#  "k" = k
)
inits <- function() {
list(
"mu" = y[1],
"tau.y" = 1,
"tau.mu" = 1
)
}
# JAGS. Modelo 1: Modelo de tendencia local
y = df$ops
n = length(y)
k=3
data <- list(
"y" = y,
"n" = n
)
inits <- function() {
list(
"mu" = y[1],
"tau.y" = 1,
"tau.mu" = 1
)
}
params <- c("mu", "y", "tau.y", "tau.mu")
modelo <- jags(
data = data,
inits = inits,
parameters.to.save = params,
model.file = "./jags/nivel.txt",
n.chains = 2,
n.iter = 50000,
n.burnin = 5000,
n.thin = 5
)
# JAGS. Modelo 1: Modelo de tendencia local
y = df$ops
n = length(y)
k=3
data <- list(
"y" = y,
"n" = n
)
inits <- function() {
list(
"mu" = y[1],
"tau.y" = 1,
"tau.mu" = 1
)
}
params <- c("mu", "y", "tau.y", "tau.mu")
modelo <- jags(
data = data,
inits = inits,
parameters.to.save = params,
model.file = "./jags/nivel.txt",
n.chains = 2,
n.iter = 50000,
n.burnin = 5000,
n.thin = 5
)
inits <- function() {
list(
"tau.y" = 1,
"tau.mu" = 1
)
}
params <- c("mu", "y", "tau.y", "tau.mu")
modelo <- jags(
data = data,
inits = inits,
parameters.to.save = params,
model.file = "./jags/nivel.txt",
n.chains = 2,
n.iter = 50000,
n.burnin = 5000,
n.thin = 5
)
modelo$summary()
modelo$BUGSoutput
